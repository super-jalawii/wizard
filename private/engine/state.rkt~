#lang racket

;; Define a gamestate manager and the concept of a gamestate.

;; The current gamestate is a stack of gamestates, and each gamestate can
;; initiate a transition to another ele, or relinquish its position as the
;; active ele.


(require wizard/ecs
         racket/generic
         racket/provide)


(provide (struct-out GameState)
         (matching-identifiers-out #rx"GameState::.*" (all-defined-out))
         gen:game-state
         game-handle-input
         game-update
         game-draw
         (rename-out [make-GameStateManager GameStateManager]))

(define/event GameState ([Push ele]
                         [Pop]
                         [TransitionTo ele]))

(struct Stack (data) #:mutable)

(define [push! stack ele]
  (set-Stack-data! stack (cons ele (Stack-data stack))))

(define [pop! stack]
  (let ([state (car (Stack-data stack))])
    (set-Stack-data! stack (cdr (Stack-data stack)))))

(define [replace! stack ele]
  (pop! stack)
  (push! stack ele))

(define [current stack]
  (car (Stack-data stack)))

(define [do-nothing gs] (void))

(define-generics game-state
  (game-state:init          game-state)
  (game-state:cleanup       game-state)
  (game-state:pause         game-state)
  (game-state:resume        game-state)
  (game-state:handle-input  game-state)
  (game-state:update        game-state)
  (game-state:draw          game-state)
  #:fallbacks
  [(define game-state:init         do-nothing)
   (define game-state:cleanup      do-nothing)
   (define game-state:pause        do-nothing)
   (define game-state:resume       do-nothing)
   (define game-state:handle-input do-nothing)
   (define game-state:update       do-nothing)
   (define game-state:draw         do-nothing)])

(struct GameState () #:methods gen:game-state [])
(struct IdleGameState GameState ())

(struct GameStateManager (stack)
  #:mutable
  #:methods gen:game-state
  [(define [game-state:pause self]
     (game-state:pause (current (GameStateManager-stack self))))
   (define [game-state:resume self]
     (game-state:resume (current (GameStateManager-stack self))))
   (define [game-state:handle-input self]
     (game-state:handle-input (current (GameStateManager-stack self))))
   (define [game-state:update self]
     (let ([stack (GameStateManager-stack self)]
           [curr  (current (GameStateManager-stack self))])
       ;; Check for GameState events and respond to them as needed.
       (recv GameState
             [(GameState::Push state) (game-state:pause curr)
                                      (push! stack state)
                                      (game-state:init state)]
             [(GameState::Pop) (game-state:cleanup curr)
                               (pop! stack)
                               (game-state:resume (current stack))]
             [(GameState::TransitionTo next) (game-state:cleanup curr)
                                             (replace! stack next)
                                             (game-state:init next)]))
     (game-state:update (current (GameStateManager-stack self))))
   (define [game-state:draw self]
     (game-state:draw (current (GameStateManager-stack self))))
   (define game-state:cleanup do-nothing)
   (define game-state:init    do-nothing)])

(define [game-update gsm]
  (game-state:update gsm))

(define [game-handle-input gsm]
  (game-state:handle-input gsm))

(define [game-draw gsm]
  (game-state:draw gsm))

(define [make-GameStateManager]
  (GameStateManager (Stack (list (IdleGameState)))))
